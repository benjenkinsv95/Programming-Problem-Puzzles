/*
 * Copyright 2015 Ben Jenkins <benjenkinsv95@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package q02.even.fibonacci.numbers;

/**
 *
 * @author Ben Jenkins <benjenkinsv95@gmail.com>
 * Problem Description: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
 * Problem Link: https://projecteuler.net/problem=2
 * Answer: 4,613,732
 */
public class Q02EvenFibonacciNumbers {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        int lastNumber = 1;
        int currentNumber = 2;
        final int MAX_NUMBER = 4000000;
        int evenSum = 0;
        
        while(currentNumber < MAX_NUMBER){
            
            // If even add current fibonacci number to sum
            if(currentNumber % 2 == 0){
                evenSum += currentNumber;
            }
            
            // Advance Fibonacci Numbers
            int temp = currentNumber;
            currentNumber += lastNumber;
            lastNumber = temp;
            
        }
        
        System.out.println("Sum of even valued fibonacci numbers: " + evenSum);
    }

}
